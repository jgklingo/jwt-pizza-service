{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "JWT Pizza Service and DB",
  "Parameters": {
    "TaskVersion": {
      "Type": "String",
      "Description": "JWT Pizza Service Task Definition version to initialize the ECS service with",
      "Default": ""
    },
    "CertificateArn": {
      "Type": "String",
      "Description": "Load balancer web certificate ARN use to support HTTPS on the ALB",
      "Default": ""
    },
    "SecurityGroupID": {
      "Type": "String",
      "Description": "ECS service and ALB Security group",
      "Default": ""
    },
    "SubnetIDs": {
      "Type": "CommaDelimitedList",
      "Description": "A comma delimited list of VPC network subnets for the ECS service, ALB, and RDS",
      "Default": ""
    },
    "VpcID": {
      "Type": "String",
      "Description": "The ID of the VPC for the ALB",
      "Default": "",
      "AllowedPattern": "^(?:vpc-[0-9a-f]{8,17}|)$",
      "ConstraintDescription": "VPC ID must begin with 'vpc-' and have a valid uuid"
    },
    "HostedZoneID": {
      "Type": "String",
      "Description": "Route53 hosted zone ID for the application",
      "Default": ""
    },
    "ServiceURL": {
      "Type": "String",
      "Description": "URL where the service will be located",
      "Default": ""
    },
    "InstancePassword": {
      "Type": "String",
      "Description": "RDS instance master password"
    },
    "PrivateHostedZoneID": {
        "Type": "String",
        "Description": "Route53 private hosted zone ID for the application",
        "Default": ""
    },
    "DBURL": {
        "Type": "String",
        "Description": "URL where the database will be located within the VPC",
        "Default": ""
    }
  },
  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "jwt-pizza-service"
      }
    },
    "ECSService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Ref": "ECSCluster" },
        "CapacityProviderStrategy": [{ "CapacityProvider": "FARGATE", "Base": 0, "Weight": 1 }],
        "TaskDefinition": {
          "Fn::Join": [
            ":",
            ["arn:aws:ecs", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "task-definition/jwt-pizza-service", { "Ref": "TaskVersion" }]
          ]
        },
        "ServiceName": "jwt-pizza-service",
        "SchedulingStrategy": "REPLICA",
        "DesiredCount": 1,
        "LoadBalancers": [
          {
            "ContainerName": "jwt-pizza-service",
            "ContainerPort": 80,
            "LoadBalancerName": {
              "Ref": "AWS::NoValue"
            },
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [{
              "Ref": "SecurityGroupID"
            }],
            "Subnets": {
              "Ref": "SubnetIDs"
            }
          }
        },
        "PlatformVersion": "LATEST",
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": true
          }
        },
        "DeploymentController": {
          "Type": "ECS"
        },
        "ServiceConnectConfiguration": {
          "Enabled": false
        },
        "Tags": [],
        "EnableECSManagedTags": true
      },
      "DependsOn": ["Listener"]
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Type": "application",
        "Name": "jwt-pizza-service",
        "SecurityGroups": [{
          "Ref": "SecurityGroupID"
        }],
        "Subnets": {
          "Ref": "SubnetIDs"
        }
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckPath": "/",
        "Name": "jwt-pizza-service",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "HealthCheckProtocol": "HTTP",
        "VpcId": {
          "Ref": "VpcID"
        },
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "300"
          }
        ]
      }
    },
    "Listener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": { "Ref": "CertificateArn" }
          }
        ]
      }
    },
    "DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": { "Ref": "HostedZoneID" },
        "Name": { "Ref": "ServiceURL" },
        "Type": "CNAME",
        "TTL": "300",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["LoadBalancer", "DNSName"]
          }
        ]
      }
    },
    "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupName": "jwt-pizza-db-subnet-group",
                "DBSubnetGroupDescription": "Subnet group for the jwt-pizza RDS instance",
                "SubnetIds": {
                    "Ref": "SubnetIDs"
                }
            }
    },
    "RDSInstance": {
        "Type": "AWS::RDS::DBInstance",
        "Properties": {
            "Engine": "mysql",
            "DBInstanceIdentifier": "jwt-pizza-service-db",
            "MasterUsername": "admin",
            "MasterUserPassword": {
                "Ref": "InstancePassword"
            },
            "DBInstanceClass": "db.t4g.micro",
            "PubliclyAccessible": "false",
            "VPCSecurityGroups": [
                {
                    "Ref": "SecurityGroupID"
                }
            ],
            "AvailabilityZone": {
                "Fn::Select": [
                    "0",
                    {
                        "Fn::GetAZs": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            },
            "EnableIAMDatabaseAuthentication": "true",
            "AllocatedStorage": "20",
            "StorageType": "gp3",
            "MultiAZ": "false",
            "EngineLifecycleSupport": "open-source-rds-extended-support-disabled",
            "StorageEncrypted": "true",
            "DBSubnetGroupName": {
                "Ref": "DBSubnetGroup"
            }
        }
    },
    "DNSRecordDB": {
        "DependsOn": "RDSInstance",
        "Type": "AWS::Route53::RecordSet",
        "Properties": {
            "HostedZoneId": {
                "Ref": "PrivateHostedZoneID"
            },
            "Name": {
                "Ref": "DBURL"
            },
            "Type": "CNAME",
            "TTL": "300",
            "ResourceRecords": [
                {
                    "Fn::GetAtt": [
                        "RDSInstance",
                        "Endpoint.Address"
                    ]
                }
            ]
        }
    }
  },
  "Outputs": {
    "ClusterName": {
      "Description": "Cluster",
      "Value": {
        "Ref": "ECSCluster"
      }
    },
    "ECSService": {
      "Description": "Service",
      "Value": {
        "Ref": "ECSService"
      }
    },
    "LoadBalancer": {
      "Description": "Load balancer",
      "Value": {
        "Ref": "LoadBalancer"
      }
    },
    "Listener": {
      "Description": "Load balancer listener",
      "Value": {
        "Ref": "Listener"
      }
    },
    "TargetGroup": {
      "Description": "Load balancer target group",
      "Value": {
        "Ref": "TargetGroup"
      }
    },
    "RDSInstance": {
      "Description": "RDS instance",
      "Value": {
          "Ref": "RDSInstance"
      }
    }
  }
}